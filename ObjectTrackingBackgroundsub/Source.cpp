#include "opencv2/imgcodecs.hpp"
#include "opencv2/imgproc.hpp"
#include "opencv2/videoio.hpp"
#include <opencv2/highgui.hpp>
#include <opencv2/video.hpp>
#include<opencv2/bgsegm.hpp>
//C
#include <stdio.h>
//C++
#include <iostream>
#include <sstream>

using namespace cv;
using namespace std;

// Global variables
Mat frame; //current frame
Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
Ptr<BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
char keyboard; //input from keyboard
const int FRAME_WIDTH = 640;
const int FRAME_HEIGHT =360;

			   /** Function Headers */
void help();
void processVideo(char* videoFilename);
void processImages(char* firstFrameFilename);
Point2i locate(Mat thold,Mat* output);
Rect drawRect(Mat* frame,Point2i center);

void help()
{
	cout
		<< "--------------------------------------------------------------------------" << endl
		<< "This program shows how to use background subtraction methods provided by " << endl
		<< " OpenCV. You can process both videos (-vid) and images (-img)." << endl
		<< endl
		<< "Usage:" << endl
		<< "./bg_sub {-vid <video filename>|-img <image filename>}" << endl
		<< "for example: ./bg_sub -vid video.avi" << endl
		<< "or: ./bg_sub -img /data/images/1.png" << endl
		<< "--------------------------------------------------------------------------" << endl
		<< endl;
}

/**
* @function main
*/
int main(int argc, char* argv[])
{
	//print help information
	help();

	//check for the input parameter correctness
/*	if (argc != 3) {
		cerr << "Incorret input list" << endl;
		cerr << "exiting..." << endl;
		return EXIT_FAILURE;
	}*/

	//create GUI windows
	namedWindow("Frame");
	namedWindow("FG Mask MOG 2");

	//create Background Subtractor objects
	pMOG2 = createBackgroundSubtractorMOG2(); //MOG2 approach
	//pMOG = createBackgroundSubtractorMOG(); //MOG approach
	processVideo("tz1webcamvid1test.mp4");
	//processImages("1.jpg");
/*	if (strcmp(argv[1], "-vid") == 0) {
		//input data coming from a video
		processVideo(argv[2]);
	}
	else if (strcmp(argv[1], "-img") == 0) {
		//input data coming from a sequence of images
		processImages(argv[2]);
	}
	else {
		//error in reading input parameters
		cerr << "Please, check the input parameters." << endl;
		cerr << "Exiting..." << endl;
		return EXIT_FAILURE;
	}*/
	//destroy GUI windows
	destroyAllWindows();
	return EXIT_SUCCESS;
}

/**
* @function processVideo
*/
void processVideo(char* videoFilename) {
	Mat firstFrame;
	int c = 0;
	Mat gray;
	Mat binary;
	vector<Vec3f> circles;
	Point2i centerOfObject;
	Rect recAroundOject;
	
	//create the capture object
	VideoCapture capture(videoFilename);
	capture.set(CV_CAP_PROP_FRAME_WIDTH, FRAME_WIDTH);
	capture.set(CV_CAP_PROP_FRAME_HEIGHT, FRAME_HEIGHT);
	if (!capture.isOpened()) {
		//error in opening the video input
		cerr << "Unable to open video file: " << videoFilename << endl;
		exit(EXIT_FAILURE);
	}
	//read input data. ESC or 'q' for quitting
	keyboard = 0;
	while (keyboard != 'q' && keyboard != 27) {
		//read the current frame
		if (!capture.read(frame)) {
			cerr << "Unable to read next frame." << endl;
			cerr << "Exiting..." << endl;
			exit(EXIT_FAILURE);
		}
	//	resize(frame, frame, Size(frame.cols / 5, frame.rows /5));
		
		//update the background model
		pMOG2->apply(frame, fgMaskMOG2);
		
		erode(fgMaskMOG2, binary, Mat(),Point(-1,-1),2);
		dilate(binary, binary, Mat(),Point(-1,-1),2);
		centerOfObject=locate(binary, &frame);
		recAroundOject = drawRect(&frame, centerOfObject);
		if (c == 0)
		{
			//this frame is used for subtraction
			fgMaskMOG2.copyTo(firstFrame);
			c++;
		}
			//Hough Circles
	/*		HoughCircles(binary, circles, CV_HOUGH_GRADIENT, 1, 1);
			for (size_t i = 0; i < circles.size(); i++)
			{
				Point center(cvRound(circles[i][0]), cvRound(circles[i][1]));
				int radius = cvRound(circles[i][2]);
				// circle center
				circle(frame, center, 3, Scalar(0, 255, 0), -1, 8, 0);
				// circle outline
				circle(frame, center, radius, Scalar(0, 0, 255), 3, 8, 0);
			}*/

			//get the frame number and write it on the current frame
			stringstream ss;
			rectangle(frame, cv::Point(10, 2), cv::Point(100, 20),
				cv::Scalar(255, 255, 255), -1);
			ss << capture.get(CAP_PROP_POS_FRAMES);
			string frameNumberString = ss.str();
			putText(frame, frameNumberString.c_str(), cv::Point(15, 15),
				FONT_HERSHEY_SIMPLEX, 0.5, cv::Scalar(0, 0, 0));
			//show the current frame and the fg masks
			imshow("Frame", frame);
		//	imshow("FG Mask MOG 2", fgMaskMOG2-firstFrame); //this is the subtracted image
			imshow("FG Mask MOG 2.2",binary);
			//get the input from the keyboard
			keyboard = (char)waitKey(30);
		
	}
	//delete capture object
	capture.release();
}
Point2i locate(Mat thold,Mat* output)
{
	Point2i center;
	Mat temp;
	int x, y;
	thold.copyTo(temp);
	//threshold(temp, temp, 100, 255, CV_THRESH_BINARY);
	vector< vector<Point> > contours;
	vector<Vec4i> hierarchy;
	findContours(temp, contours, hierarchy, CV_RETR_CCOMP, CV_CHAIN_APPROX_SIMPLE);
	if (hierarchy.size()>0) 
	{
		for (int index = 0; index >= 0; index = hierarchy[index][0])
		{
			Moments moment = moments((cv::Mat)contours[index]);
			double area = moment.m00;
			if (area > 300)
			{
				x = moment.m10 / area;
				y = moment.m01 / area;
				
			}
			printf("Area = %f ; x=%d ; y=%d\n", area, x, y);
		}
	}

	if (x > 0 && y > 0)
	{
		circle(*output, Point(x, y), 2, Scalar(0, 0, 255), -1);
		center.x = x;
		center.y = y;
		return center;
	}
	else
	{
		center.x = 0;
		center.y = 0;
		return center;
	}
}

Rect drawRect(Mat* frame, Point2i center)
{
	Rect rec=Rect(0,0,0,0);
	if (center.x > 0 && center.y > 0)
	{
		rec=Rect(Point2i(center.x - 20, center.y - 20), Point2i(center.x + 20, center.y + 20));
		rectangle(*frame, rec, Scalar(0, 0, 255));
	}
	return rec;
}
/**
* @function processImages
*/
void processImages(char* fistFrameFilename) {
	//read the first file of the sequence
	frame = imread(fistFrameFilename);
	if (frame.empty()) {
		//error in opening the first image
		cerr << "Unable to open first image frame: " << fistFrameFilename << endl;
		exit(EXIT_FAILURE);
	}
	//current image filename
	string fn(fistFrameFilename);
	//read input data. ESC or 'q' for quitting
	keyboard = 0;
	while (keyboard != 'q' && keyboard != 27) {
		//update the background model
		pMOG2->apply(frame, fgMaskMOG2);
		//get the frame number and write it on the current frame
		size_t index = fn.find_last_of("/");
		if (index == string::npos) {
			index = fn.find_last_of("\\");
		}
		size_t index2 = fn.find_last_of(".");
		string prefix = fn.substr(0, index + 1);
		string suffix = fn.substr(index2);
		string frameNumberString = fn.substr(index + 1, index2 - index - 1);
		istringstream iss(frameNumberString);
		int frameNumber = 0;
		iss >> frameNumber;
		rectangle(frame, cv::Point(10, 2), cv::Point(100, 20),
			cv::Scalar(255, 255, 255), -1);
		putText(frame, frameNumberString.c_str(), cv::Point(15, 15),
			FONT_HERSHEY_SIMPLEX, 0.5, cv::Scalar(0, 0, 0));
		//show the current frame and the fg masks
		imshow("Frame", frame);
		imshow("FG Mask MOG 2", fgMaskMOG2);
		//get the input from the keyboard
		keyboard = (char)waitKey(30);
		//search for the next image in the sequence
		ostringstream oss;
		oss << (frameNumber + 1);
		string nextFrameNumberString = oss.str();
		string nextFrameFilename = prefix + nextFrameNumberString + suffix;
		//read the next frame
		frame = imread(nextFrameFilename);
		if (frame.empty()) {
			//error in opening the next image in the sequence
			cerr << "Unable to open image frame: " << nextFrameFilename << endl;
			exit(EXIT_FAILURE);
		}
		//update the path of the current frame
		fn.assign(nextFrameFilename);
	}
}